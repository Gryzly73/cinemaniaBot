import os
import json
import logging
import asyncio
import aiohttp
from typing import Dict, Optional
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import ChatLocation, Message # ChatAction
from aiogram.exceptions import TelegramAPIError
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import openai
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GOOGLE_CX_ID = os.getenv("GOOGLE_CX_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
# print(OPENAI_API_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN_V2)
)
dp = Dispatcher()
scheduler = AsyncIOScheduler()


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    waiting_description = State()
    choosing_style = State()


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_styles: Dict[int, str] = {}
STYLE_DESCRIPTIONS = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π
try:
    with open("styles.json", "r", encoding="utf-8") as f:
        STYLE_DESCRIPTIONS = json.load(f)
except Exception as e:
    logger.error(f"Error loading styles: {e}")
    STYLE_DESCRIPTIONS = {"default": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å —Ä–µ—Ü–µ–Ω–∑–∏–∏"}


# –£—Ç–∏–ª–∏—Ç—ã
def escape_md(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2"""
    escape_chars = '_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)


async def show_typing(func, message: Message):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞"""
    await bot.send_chat_action(message.chat.id, ChatAction.TYPING)
    return await func(message)


# –ú–µ–Ω—é
async def set_main_menu():
    menu_commands = [
        types.BotCommand(command="/start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand(command="/help", description="–ü–æ–º–æ—â—å"),
        types.BotCommand(command="/style", description="–°—Ç–∏–ª—å —Ä–µ—Ü–µ–Ω–∑–∏–∏")
    ]
    await bot.set_my_commands(menu_commands)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(F.text == "/start")
# @dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üé¨ –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º"),
        types.KeyboardButton(text="üé® –°—Ç–∏–ª—å —Ä–µ—Ü–µ–Ω–∑–∏–∏")
    )
    builder.row(types.KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"))

    await message.answer(
        escape_md("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *CinemaMania*! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"),
        reply_markup=builder.as_markup(resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN_V2
    )


@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
@dp.message(F.text == "/help")
async def cmd_help(message: Message):
    help_text = escape_md(
        "üé• *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "üé¨ –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º - –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n"
        "üé® –°—Ç–∏–ª—å —Ä–µ—Ü–µ–Ω–∑–∏–∏ - –í—ã–±–æ—Ä —Å—Ç–∏–ª—è —Ä–µ—Ü–µ–Ω–∑–∏–∏\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: _–§–∏–ª—å–º –ø—Ä–æ —Ö–∞–∫–µ—Ä–∞ –≤ –º–∞—Ç—Ä–∏—Ü–µ_"
    )
    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN_V2)


@dp.message(F.text == "üé® –°—Ç–∏–ª—å —Ä–µ—Ü–µ–Ω–∑–∏–∏")
@dp.message(F.text == "/style")
async def choose_style(message: Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    for style in STYLE_DESCRIPTIONS:
        builder.button(text=f"üé® {style}", callback_data=f"style_{style}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")
    builder.adjust(2)

    await message.answer(
        escape_md("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Ä–µ—Ü–µ–Ω–∑–∏–∏:"),
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await state.set_state(Form.choosing_style)


@dp.callback_query(F.data.startswith("style_"))
async def style_selected(callback: types.CallbackQuery, state: FSMContext):
    style = callback.data.split("_")[1]
    user_styles[callback.from_user.id] = style
    await callback.message.edit_text(
        escape_md(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: *{style}*\n{STYLE_DESCRIPTIONS[style]}"),
        parse_mode=ParseMode.MARKDOWN_V2
    )
    await callback.answer()


@dp.callback_query(F.data == "back_main")
async def back_button(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await cmd_start(callback.message, state)


@dp.message(F.text == "üé¨ –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º")
async def start_search(message: Message, state: FSMContext):
    await state.set_state(Form.waiting_description)
    await message.answer(
        escape_md("üîç –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:"),
        reply_markup=types.ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN_V2
    )


# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
@dp.message(Form.waiting_description)
# @show_typing
async def handle_movie_search(message: Message, state: FSMContext):
    try:
        progress_msg = await message.answer(escape_md("üîÑ –ü–æ–∏—Å–∫... 0%"))

        # –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞
        movie_title = await search_movie_gpt(message.text)
        if not movie_title:
            raise APIError("–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")

        await progress_msg.edit_text(escape_md("üîÑ –ü–æ–∏—Å–∫... 50%"))

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–Ω–∑–∏–∏
        style = user_styles.get(message.from_user.id, "default")
        review = await generate_review_gpt(movie_title, style)

        # –ü–æ–∏—Å–∫ —Ç—Ä–µ–π–ª–µ—Ä–∞
        trailer_link = await search_trailer_google(movie_title)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = format_response(movie_title, review, trailer_link)

        await progress_msg.delete()
        await message.answer(response, parse_mode=ParseMode.MARKDOWN_V2)

    except Exception as e:
        await message.answer(escape_md(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"))
    finally:
        await state.clear()


def format_response(title: str, review: str, trailer: Optional[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    safe_title = escape_md(title)
    safe_review = escape_md(review)

    response = f"üé¨ *{safe_title}*\n\n{safe_review}"

    if trailer:
        safe_trailer = escape_md(trailer)
        response += f"\n\nüé• [–°–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä]({safe_trailer})"

    return response


# –°–µ—Ä–≤–∏—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def search_movie_gpt(description: str) -> Optional[str]:
    """–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ —á–µ—Ä–µ–∑ GPT-4"""
    try:
        response = await openai.ChatCompletion.acreate(
            api_key=OPENAI_API_KEY,
            model="gpt-4",
            messages=[{
                "role": "user",
                "content": f"–û–ø—Ä–µ–¥–µ–ª–∏ —Ñ–∏–ª—å–º –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: {description}"
            }]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"OpenAI Error: {e}")
        raise APIError("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–∞")


async def generate_review_gpt(title: str, style: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–Ω–∑–∏–∏ —á–µ—Ä–µ–∑ GPT-4"""
    try:
        style_prompt = STYLE_DESCRIPTIONS.get(style, "")
        response = await openai.ChatCompletion.acreate(
            api_key=OPENAI_API_KEY,
            model="gpt-4",
            messages=[{
                "role": "system",
                "content": f"–ù–∞–ø–∏—à–∏ —Ä–µ—Ü–µ–Ω–∑–∏—é –≤ —Å—Ç–∏–ª–µ: {style_prompt}"
            }, {
                "role": "user",
                "content": f"–§–∏–ª—å–º: {title}"
            }]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"OpenAI Error: {e}")
        raise APIError("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏")


async def search_trailer_google(title: str) -> Optional[str]:
    """–ü–æ–∏—Å–∫ —Ç—Ä–µ–π–ª–µ—Ä–∞ —á–µ—Ä–µ–∑ Google API"""
    try:
        async with aiohttp.ClientSession() as session:
            params = {
                "key": GOOGLE_API_KEY,
                "cx": GOOGLE_CX_ID,
                "q": f"{title} —Ç—Ä–µ–π–ª–µ—Ä",
                "siteSearch": "youtube.com"
            }
            async with session.get(
                    "https://www.googleapis.com/customsearch/v1",
                    params=params
            ) as response:
                data = await response.json()
                return data["items"][0]["link"] if "items" in data else None
    except Exception as e:
        logger.error(f"Google Search Error: {e}")
        return None


# –ó–∞–ø—É—Å–∫
async def main():
    await set_main_menu()
    scheduler.start()
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped")