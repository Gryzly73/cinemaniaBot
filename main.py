import os
import json
import logging
import asyncio
import aiohttp
from typing import Dict, Optional
from aiogram import Bot, Dispatcher, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import openai
from dotenv import load_dotenv
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from datetime import datetime, time
import re


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMINS = list(map(int, os.getenv("ADMINS").split(','))) if os.getenv("ADMINS") else []
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN_V2))
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
DB = {
    "current_genre": "–±–æ–µ–≤–∏–∫",
    "current_style": "–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
    "schedule": "0 9 * * *",
    "posted_movies": []
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AdminStates(StatesGroup):
    setting_genre = State()
    setting_style = State()
    setting_schedule = State()

# –£—Ç–∏–ª–∏—Ç—ã

def escape_md(text: str) -> str:
    escape_chars = '_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in str(text))


def parse_cron(cron_str: str) -> dict:
    """–ü–∞—Ä—Å–∏—Ç cron-—Å—Ç—Ä–æ–∫—É –∏–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è"""
    if ":" in cron_str:
        cron_str = time_to_cron(cron_str)

    parts = cron_str.strip().split()
    return {
        "minute": parts[0],
        "hour": parts[1],
        "day": parts[2],
        "month": parts[3],
        "day_of_week": parts[4],
        "second": "0"
    }

#  —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
def time_to_cron(user_time: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –≤ cron-—Ñ–æ—Ä–º–∞—Ç
    –ü—Ä–∏–º–µ—Ä: "09:30" -> "30 9 * * *"
    """
    if not re.match(r"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$", user_time):
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")

    hours, minutes = map(int, user_time.split(':'))
    return f"{minutes} {hours} * * *"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = OPENAI_API_KEY

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π —Ä–µ—Ü–µ–Ω–∑–∏–π
try:
    with open("styles.json", "r", encoding="utf-8") as f:
        STYLE_DESCRIPTIONS = json.load(f)
except Exception as e:
    logger.error(f"Error loading styles: {e}")
    STYLE_DESCRIPTIONS = {"default": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å —Ä–µ—Ü–µ–Ω–∑–∏–∏"}

@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé¨ –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∫–∏
    if message.from_user.id in ADMINS:
        markup.keyboard.append([KeyboardButton(text=escape_md("/admin"))])

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CinemaBot\! üçø\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

# –û–±–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.message(F.text == "/admin")
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", reply_markup=types.ReplyKeyboardRemove())
        return

    try:
        cron_parts = DB["schedule"].split()
        current_time = datetime.strptime(
            f"{cron_parts[1]}:{cron_parts[0]}", "%H:%M"
        ).strftime("%H:%M")
    except Exception as e:
        logger.error(f"Error parsing cron time: {e}")
        current_time = "‚è∞ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    status_text = (
        f"‚öôÔ∏è *–ê–¥–º–∏–Ω\-–ø–∞–Ω–µ–ª—å* \n\n"
        f"‚ñ´Ô∏è *–¢–µ–∫—É—â–∏–π –∂–∞–Ω—Ä*: {escape_md(DB['current_genre'])}\n"
        f"‚ñ´Ô∏è *–°—Ç–∏–ª—å —Ä–µ—Ü–µ–Ω–∑–∏–π*: {escape_md(DB['current_style'])}\n"
        f"‚ñ´Ô∏è *–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏*: {escape_md(current_time)}\n\n"
        f"_–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\._"
        f"\n\n‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"  # –î–æ–±–∞–≤–∏–ª–∏ —Å—é–¥–∞
    )

    builder = ReplyKeyboardBuilder()
    builder.row(
        KeyboardButton(text="üé≠ –°–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä"),
        KeyboardButton(text="üñã –°–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å")
    )
    builder.row(
        KeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"),
        KeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å")
    )
    builder.row(KeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        status_text,
        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=builder.as_markup(
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ\.\.\."
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@dp.message(F.text == "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def set_schedule_handler(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏
    builder = ReplyKeyboardBuilder()
    for t in ["09:00", "12:00", "15:00", "18:00"]:
        builder.add(KeyboardButton(text=t))
    builder.adjust(2)

    await message.answer(
        "üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
        "–ü—Ä–∏–º–µ—Ä: 09:30 –∏–ª–∏ 14:00\n\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(AdminStates.setting_schedule)

@dp.message(F.text == "üé≠ –°–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä")  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä
async def set_genre_handler(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    markup = InlineKeyboardBuilder()
    for genre in ["–±–æ–µ–≤–∏–∫", "–∫–æ–º–µ–¥–∏—è", "–¥—Ä–∞–º–∞", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"]:
        markup.button(text=genre, callback_data=f"genre_{genre}")
    markup.adjust(2)

    await message.answer(
        "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∂–∞–Ω—Ä:",
        reply_markup=markup.as_markup()
    )
    await state.set_state(AdminStates.setting_genre)

@dp.callback_query(F.data.startswith("genre_"))
async def genre_selected(callback: types.CallbackQuery, state: FSMContext):
    DB["current_genre"] = callback.data.split("_")[1]
    await callback.message.edit_text(f"‚úÖ –ñ–∞–Ω—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {DB['current_genre']}")
    await state.clear()

@dp.message(F.text == "üñã –°–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å")
async def set_style_handler(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    markup = InlineKeyboardBuilder()
    for style in STYLE_DESCRIPTIONS:
        markup.button(text=style, callback_data=f"style_{style}")
    markup.adjust(2)

    await message.answer(
        "üñã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å:",
        reply_markup=markup.as_markup()
    )
    await state.set_state(AdminStates.setting_style)

@dp.callback_query(F.data.startswith("style_"))
async def style_selected(callback: types.CallbackQuery, state: FSMContext):
    DB["current_style"] = callback.data.split("_")[1]
    await callback.message.edit_text(f"‚úÖ –°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {DB['current_style']}")
    await state.clear()


# 3. –û–±–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message(AdminStates.setting_schedule)
async def process_schedule_input(message: types.Message, state: FSMContext):
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ cron
        cron_str = time_to_cron(message.text)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        DB["schedule"] = cron_str

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        job = scheduler.get_job("daily_post")
        if job:
            scheduler.reschedule_job("daily_post", trigger='cron', **parse_cron(cron_str))
        else:
            scheduler.add_job(publish_scheduled_post, trigger='cron', id="daily_post", **parse_cron(cron_str))

        await admin_panel(message)

   #  except ValueError as e:


        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    #    time_obj = datetime.strptime(message.text, "%H:%M").time()
     #   formatted_time = time_obj.strftime("%H:%M")

    #    await message.answer(
     #       f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
     #       f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {formatted_time}",
      #      reply_markup=types.ReplyKeyboardRemove()
     #   )

    except ValueError as e:
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏:\n"
            f"{escape_md(str(e))}\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú",
            parse_mode=ParseMode.MARKDOWN_V2
        )
    finally:
        await state.clear()

@dp.message(F.text == "üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å")
async def publish_now_handler(message: types.Message):
    if message.from_user.id not in ADMINS:
        return

    await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é\.\.\.")
    try:
        await publish_scheduled_post()
        await message.answer("‚úÖ –†–µ—Ü–µ–Ω–∑–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {escape_md(str(e))}")

@dp.message(F.text == "üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await cmd_start(message)

@dp.callback_query(F.data.startswith("genre_"), AdminStates.setting_genre)
async def genre_selected(callback: types.CallbackQuery, state: FSMContext):
    genre = callback.data.split("_")[1]
    DB["current_genre"] = genre
    await callback.message.edit_text(f"‚úÖ –ñ–∞–Ω—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {genre}")
    await state.clear()

@dp.callback_query(F.data.startswith("style_"), AdminStates.setting_style)
async def style_selected(callback: types.CallbackQuery, state: FSMContext):
    style = callback.data.split("_")[1]
    DB["current_style"] = style
    await callback.message.edit_text(f"‚úÖ –°—Ç–∏–ª—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {style}")
    await state.clear()

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
async def publish_scheduled_post():
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ GPT –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[{
                "role": "user",
                "content": (
                    f"–ù–∞–∑–æ–≤–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ñ–∏–ª—å–º –≤ –∂–∞–Ω—Ä–µ {DB['current_genre']}. "
                    "–û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {\"title\": \"–ù–∞–∑–≤–∞–Ω–∏–µ\", \"year\": –≥–æ–¥, "
                    "\"genre\": \"–ñ–∞–Ω—Ä\", \"description\": \"–û–ø–∏—Å–∞–Ω–∏–µ\"}. "
                    "–¢–æ–ª—å–∫–æ JSON, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."
                )
            }],
            temperature=0.3  # –î–ª—è –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –∏ —á–∏—Å—Ç–∏–º –æ—Ç–≤–µ—Ç
        raw_response = response.choices[0].message.content
        logger.debug(f"Raw response: {raw_response}")

        # –ó–∞–º–µ–Ω—è–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        json_str = (
            raw_response
            .replace("'", '"')
            .replace("```json", "")
            .replace("```", "")
            .strip()
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ—Ä—Ç–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not json_str.startswith("{"):
            json_str = "{" + json_str.split("{", 1)[-1]
        if not json_str.endswith("}"):
            json_str = json_str.split("}", 1)[0] + "}"

        movie = json.loads(json_str)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–Ω–∑–∏–∏
        review_response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[{
                "role": "system",
                "content": f"–ù–∞–ø–∏—à–∏ {DB['current_style']} —Ä–µ—Ü–µ–Ω–∑–∏—é. {STYLE_DESCRIPTIONS.get(DB['current_style'], '')}"
            }, {
                "role": "user",
                "content": f"–§–∏–ª—å–º: {movie['title']} ({movie['year']})"
            }]
        )
        review = review_response.choices[0].message.content

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –í–°–ï –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        safe_title = escape_md(movie['title'])
        safe_year = escape_md(str(movie['year']))
        safe_genre = escape_md(movie['genre'])
        safe_style = escape_md(DB['current_style'])
        safe_review = escape_md(review)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π
        post = (
            f"üé¨ *{safe_title}* \\({safe_year}\\)\n\n"
            f"üìñ –ñ–∞–Ω—Ä: {safe_genre}\n"
            f"üìù –†–µ—Ü–µ–Ω–∑–∏—è \\({safe_style}\\):\n{safe_review}"
        )

        await bot.send_message(
            chat_id=CHANNEL_ID,
            text=post,
            parse_mode=ParseMode.MARKDOWN_V2
        )

    except json.JSONDecodeError as e:
        logger.error(f"JSON decode error: {e}\nResponse: {raw_response}")
        await bot.send_message(
            ADMINS[0],
            f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON:\n{raw_response}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
        await bot.send_message(
            ADMINS[0],
            f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n{str(e)}"
        )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
scheduler.add_job(
    publish_scheduled_post,
    trigger='cron',
    id="daily_post",
    **parse_cron(DB['schedule'])
)

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤–Ω—É—Ç—Ä–∏ event loop
    scheduler.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ—Ä—É—Ç–∏–Ω—É
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        scheduler.shutdown()