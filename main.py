import os
import json
import logging
from typing import Dict, Optional
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import openai
from dotenv import load_dotenv
import asyncio

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMINS = list(map(int, os.getenv("ADMINS").split(',')))
CHANNEL_ID = os.getenv("CHANNEL_ID")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB = {
    "current_genre": "–±–æ–µ–≤–∏–∫",
    "current_style": "–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
    "schedule": "0 9 * * *",
    "posted_movies": []
}


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AdminStates(StatesGroup):
    setting_genre = State()
    setting_style = State()
    setting_schedule = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai.api_key = OPENAI_API_KEY


# –£—Ç–∏–ª–∏—Ç—ã
def escape_md(text: str) -> str:
    escape_chars = '_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in text)


# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message(F.text == "/admin")
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMINS:
        return

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üé≠ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∂–∞–Ω—Ä", callback_data="set_genre")
    keyboard.button(text="üñã –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª—å", callback_data="set_style")
    keyboard.button(text="‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="set_schedule")
    keyboard.button(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="publish_now")
    keyboard.adjust(2)

    status = (
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"–ñ–∞–Ω—Ä: {DB['current_genre']}\n"
        f"–°—Ç–∏–ª—å: {DB['current_style']}\n"
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {DB['schedule']}"
    )

    await message.answer(
        escape_md(status),
        reply_markup=keyboard.as_markup(),
        parse_mode=ParseMode.MARKDOWN_V2
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.callback_query(F.data == "set_genre")
async def set_genre_handler(callback: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardBuilder()
    for genre in ["–±–æ–µ–≤–∏–∫", "–∫–æ–º–µ–¥–∏—è", "–¥—Ä–∞–º–∞", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"]:
        keyboard.button(text=genre, callback_data=f"genre_{genre}")
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:",
        reply_markup=keyboard.as_markup()
    )


@dp.callback_query(F.data.startswith("genre_"))
async def genre_selected(callback: types.CallbackQuery):
    DB['current_genre'] = callback.data.split("_")[1]
    await callback.message.edit_text(f"‚úÖ –ñ–∞–Ω—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {DB['current_genre']}")


# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–ª—è —Å—Ç–∏–ª—è –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
async def publish_scheduled_post():
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ GPT –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞
        movie = await get_movie_by_genre(DB['current_genre'])
        review = await generate_review(movie, DB['current_style'])

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
        post = format_post(movie, review)

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
        await bot.send_message(
            chat_id=CHANNEL_ID,
            text=post,
            parse_mode=ParseMode.MARKDOWN_V2
        )

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        DB['posted_movies'].append(movie['title'])

    except Exception as e:
        logging.error(f"Publish error: {e}")


async def get_movie_by_genre(genre: str) -> Dict:
    prompt = f"–ù–∞–∑–æ–≤–∏ –Ω–æ–≤—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ñ–∏–ª—å–º –≤ –∂–∞–Ω—Ä–µ {genre}. –û—Ç–≤–µ—Ç –≤ JSON: "
    response = await openai.ChatCompletion.acreate(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    return json.loads(response.choices[0].message.content)


async def generate_review(movie: Dict, style: str) -> str:
    prompt = (
        f"–ù–∞–ø–∏—à–∏ {style} —Ä–µ—Ü–µ–Ω–∑–∏—é –Ω–∞ —Ñ–∏–ª—å–º {movie['title']}. "
        f"–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –≥–æ–¥ - {movie['year']}, –∂–∞–Ω—Ä - {movie['genre']}. "
        "–ò—Å–ø–æ–ª—å–∑—É–π Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."
    )
    response = await openai.ChatCompletion.acreate(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content


def format_post(movie: Dict, review: str) -> str:
    return (
        f"üé¨ *{escape_md(movie['title'])}* ({movie['year']})\n\n"
        f"üìñ –ñ–∞–Ω—Ä: {escape_md(movie['genre'])}\n\n"
        f"üìù –†–µ—Ü–µ–Ω–∑–∏—è ({DB['current_style']}):\n{escape_md(review)}"
    )


def parse_cron(cron_str: str) -> dict:
    parts = cron_str.strip().split()
    if len(parts) != 5:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç cron. –ü—Ä–∏–º–µ—Ä: '0 9 * * *'")

    return {
        "minute": parts[0],
        "hour": parts[1],
        "day": parts[2],
        "month": parts[3],
        "day_of_week": parts[4]
    }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
try:
    scheduler.add_job(
        publish_scheduled_post,
        trigger='cron',
        **parse_cron(DB['schedule'])
    )
except ValueError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {e}")


def parse_cron(schedule: str) -> Dict:
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ "0 9 * * *" –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è APScheduler
    parts = schedule.split()
    return {
        "minute": parts[0],
        "hour": parts[1],
        "day": parts[2],
        "month": parts[3],
        "day_of_week": parts[4]
    }


# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())