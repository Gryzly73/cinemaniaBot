import os
import json
import logging
import asyncio
import aiohttp
import uuid
import re
from typing import Dict, Optional
from aiogram import Bot, Dispatcher, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import openai
from dotenv import load_dotenv
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime, time

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMINS = list(map(int, os.getenv("ADMINS").split(','))) if os.getenv("ADMINS") else []
CHANNEL_ID = os.getenv("CHANNEL_ID")
MOVIES_HISTORY_FILE = "movies_history.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN_V2))
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB = {
    "current_genre": "–±–æ–µ–≤–∏–∫",
    "current_style": "–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π",
    "schedule": "0 9 * * *",
    "posted_imdb_ids": []
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AdminStates(StatesGroup):
    setting_genre = State()
    setting_style = State()
    setting_schedule = State()
    custom_review = State()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π —Ä–µ—Ü–µ–Ω–∑–∏–π
try:
    with open("styles.json", "r", encoding="utf-8") as f:
        STYLE_DESCRIPTIONS = json.load(f)
except Exception as e:
    logger.error(f"Error loading styles: {e}")
    STYLE_DESCRIPTIONS = {"default": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∏–ª—å —Ä–µ—Ü–µ–Ω–∑–∏–∏"}

# –£—Ç–∏–ª–∏—Ç—ã
def escape_md(text: str) -> str:
    escape_chars = '_*[]()~`>#+-=|{}.!'
    return ''.join(f'\\{char}' if char in escape_chars else char for char in str(text))

def time_to_cron(user_time: str) -> str:
    if not re.match(r"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$", user_time):
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
    hours, minutes = map(int, user_time.split(':'))
    return f"{minutes} {hours} * * *"

def parse_cron(cron_str: str) -> dict:
    if ":" in cron_str:
        cron_str = time_to_cron(cron_str)
    parts = cron_str.strip().split()
    return {
        "minute": parts[0],
        "hour": parts[1],
        "day": parts[2],
        "month": parts[3],
        "day_of_week": parts[4]
    }

# –†–∞–±–æ—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ñ–∏–ª—å–º–æ–≤
def save_to_history(movie: dict):
    try:
        with open(MOVIES_HISTORY_FILE, "a", encoding="utf-8") as f:
            record = {
                "date": datetime.now().isoformat(),
                **movie
            }
            f.write(json.dumps(record, ensure_ascii=False) + "\n")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

def load_history() -> list:
    try:
        with open(MOVIES_HISTORY_FILE, "r", encoding="utf-8") as f:
            return [json.loads(line) for line in f.readlines()]
    except FileNotFoundError:
        return []

# OpenAI —Ñ—É–Ω–∫—Ü–∏–∏
openai.api_key = OPENAI_API_KEY

MOVIE_PROMPT = """–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –≤ –∂–∞–Ω—Ä–µ {genre} –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
Title: –ù–∞–∑–≤–∞–Ω–∏–µ
Year: –ì–æ–¥
IMDB-ID: ttXXXXXX (–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å IMDB)
Plot: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–¢–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∏–ª—å–º—ã!"""

GENERAL_REVIEW_PROMPT = os.getenv("GENERAL_REVIEW_PROMPT", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ—Ü–µ–Ω–∑–∏–∏")

async def get_movie_data(genre: str) -> Optional[dict]:
    attempt = 0
    while attempt < 3:
        try:
            response = await openai.ChatCompletion.acreate(
                model="gpt-4",
                messages=[{
                    "role": "user",
                    "content": MOVIE_PROMPT.format(genre=genre)
                }],
                temperature=0.7
            )

            raw_text = response.choices[0].message.content
            return parse_movie_response(raw_text)

        except Exception as e:
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ—É–¥–∞—á–Ω–∞: {str(e)}")
            attempt += 1
    return None

def parse_movie_response(text: str) -> Optional[dict]:
    try:
        imdb_id = re.search(r'tt\d{7,8}', text).group(0)
        title = re.search(r'Title: (.+)', text).group(1)
        year = re.search(r'Year: (\d{4})', text).group(1)
        plot = re.search(r'Plot: (.+)', text, re.DOTALL).group(1)

        return {
            "imdb_id": imdb_id,
            "title": title.strip(),
            "year": int(year),
            "plot": plot.strip()
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
        return None

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏
async def generate_review(movie: dict) -> str:
    style_description = STYLE_DESCRIPTIONS.get(
        DB['current_style'],
        "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å"
    )

    system_prompt = (
        f"{GENERAL_REVIEW_PROMPT}\n\n"
        f"–°—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è: {DB['current_style']}\n"
        f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å—Ç–∏–ª—è: {style_description}"
    )

    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[
                {
                    "role": "system",
                    "content": system_prompt
                },
                {
                    "role": "user",
                    "content": (
                        f"–§–∏–ª—å–º: {movie['title']} ({movie['year']})\n"
                        f"–°—é–∂–µ—Ç: {movie['plot']}\n\n"
                        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–µ—Ü–µ–Ω–∑–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º:"
                    )
                }
            ],
            temperature=0.7,
            max_tokens=1000
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        return "–†–µ—Ü–µ–Ω–∑–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
async def publish_scheduled_post():
    movie = await get_movie_data(DB["current_genre"])

    if not movie:
        await notify_admin("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞!")
        return

    if movie["imdb_id"] in DB["posted_imdb_ids"]:
        await handle_duplicate(movie)
        return

    try:
        review = await generate_review(movie)
        post = (
            f"üé¨ *{escape_md(movie['title'])}* \\({escape_md(str(movie['year']))}\\)\n\n"
            f"üìñ –ñ–∞–Ω—Ä: {escape_md(DB['current_genre'])}\n"
            f"üìù –†–µ—Ü–µ–Ω–∑–∏—è \\({escape_md(DB['current_style'])}\\):\n{escape_md(review)}"
        )

        await bot.send_message(CHANNEL_ID, text=post, parse_mode=ParseMode.MARKDOWN_V2)
        DB["posted_imdb_ids"].append(movie["imdb_id"])
        save_to_history(movie)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
        await notify_admin(f"üî• –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")

async def handle_duplicate(movie: dict):
    logger.warning(f"–î—É–±–ª–∏–∫–∞—Ç IMDB ID: {movie['imdb_id']}")
    new_movie = await get_movie_data(DB["current_genre"])
    if new_movie:
        await publish_scheduled_post()

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
async def notify_admin(message: str):
    for admin in ADMINS:
        await bot.send_message(admin, message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üé≠ –°–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä"
@dp.message(F.text == "üé≠ –°–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä")
async def set_genre_handler(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    builder = InlineKeyboardBuilder()
    for genre in ["–±–æ–µ–≤–∏–∫", "–∫–æ–º–µ–¥–∏—è", "–¥—Ä–∞–º–∞", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"]:
        builder.button(text=genre, callback_data=f"genre_{genre}")
    builder.adjust(2)

    await message.answer(
        "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∂–∞–Ω—Ä:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(AdminStates.setting_genre)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üñã –°–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å"
@dp.message(F.text == "üñã –°–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å")
async def set_style_handler(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    markup = InlineKeyboardBuilder()
    for style in STYLE_DESCRIPTIONS:
        markup.button(text=style, callback_data=f"style_{style}")
    markup.adjust(2)

    await message.answer(
        "üñã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å:",
        reply_markup=markup.as_markup()
    )
    await state.set_state(AdminStates.setting_style)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è"
@dp.message(F.text == "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è")
async def set_schedule_handler(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    builder = ReplyKeyboardBuilder()
    for t in ["09:00", "12:00", "15:00", "18:00"]:
        builder.add(KeyboardButton(text=t))
    builder.adjust(2)

    await message.answer(
        "üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: 09:30",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(AdminStates.setting_schedule)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
@dp.message(F.text == "/cancel")
async def cancel_handler(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    await state.clear()
    await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
    await admin_panel(message)

@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é")
async def cancel_button_handler(message: types.Message, state: FSMContext):
    await cancel_handler(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìù –ï—â–µ —Ä–µ—Ü–µ–Ω–∑–∏—è"
@dp.message(F.text == "üìù –ï—â–µ —Ä–µ—Ü–µ–Ω–∑–∏—è")
async def another_review_handler(message: types.Message, state: FSMContext):
    await custom_review_start(message, state)

# –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ generate_custom_review –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ parse_custom_review
def parse_custom_review(text: str) -> Optional[dict]:
    try:
        title = re.search(r'Title: (.+)', text).group(1)
        year = re.search(r'Year: (\d{4})', text).group(1)
        review = re.search(r'Review: (.+)', text, re.DOTALL).group(1).strip()
        plot_match = re.search(r'Plot: (.+)', text, re.DOTALL)
        plot = plot_match.group(1).strip() if plot_match else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        return {
            "title": title.strip(),
            "year": int(year),
            "review": review,
            "plot": plot
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–µ—Ü–µ–Ω–∑–∏–∏: {str(e)}")
        return None

async def generate_custom_review(query: str) -> Optional[dict]:
    system_prompt = (
        f"{GENERAL_REVIEW_PROMPT}\n"
        f"–°—Ç–∏–ª—å: {DB['current_style']}\n"
        "–£—á—Ç–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –∏–ª–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ!\n"
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
        "Title: –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞\n"
        "Year: –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞\n"
        "Plot: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—é–∂–µ—Ç–∞\n"
        "Review: –¢–µ–∫—Å—Ç —Ä–µ—Ü–µ–Ω–∑–∏–∏\n\n"
    )

    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[
                {
                    "role": "system",
                    "content": system_prompt
                },
                {
                    "role": "user",
                    "content": f"–ó–∞–ø—Ä–æ—Å: {query}\n\n–ù–∞–ø–∏—à–∏ —Ä–µ—Ü–µ–Ω–∑–∏—é –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:"
                }
            ],
            temperature=0.8,
            max_tokens=1500
        )
        raw_text = response.choices[0].message.content
        return parse_custom_review(raw_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–µ—Ü–µ–Ω–∑–∏–∏: {str(e)}")
        return None

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_custom_review
@dp.message(AdminStates.custom_review)
async def process_custom_review(message: types.Message, state: FSMContext):
    try:
        current_state = await state.get_state()

        await bot.send_chat_action(message.chat.id, "typing")
        review_data = await generate_custom_review(message.text)

        if not review_data:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            movie={
                "title": review_data["title"],
                "year": review_data["year"],
                "plot": review_data["plot"],
                "imdb_id": f"custom_{uuid.uuid4().hex}"
            },
            review=review_data["review"]
        )

        builder = ReplyKeyboardBuilder()
        builder.row(KeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å"))
        builder.row(
            KeyboardButton(text="üìù –ï—â–µ —Ä–µ—Ü–µ–Ω–∑–∏—è"),
            KeyboardButton(text="üîô –í –∞–¥–º–∏–Ω–∫—É")
        )

        await message.answer(
            escape_md(f"üìù –†–µ—Ü–µ–Ω–∑–∏—è ({DB['current_style']}):\n\n{review_data['review']}"),
            reply_markup=builder.as_markup(resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN_V2
        )

    except Exception as e:
        logger.error(f"Custom review error: {str(e)}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        await state.clear()

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
@dp.message(F.text == "üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å")
async def publish_now_handler(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    data = await state.get_data()
    movie = data.get('movie')
    review = data.get('review')

    if movie and review:
        try:
            post = (
                f"üé¨ *{escape_md(movie['title'])}* \\({escape_md(str(movie['year']))}\\)\n\n"
                f"üìñ –ñ–∞–Ω—Ä: {escape_md(DB['current_genre'])}\n"
                f"üìù –†–µ—Ü–µ–Ω–∑–∏—è \\({escape_md(DB['current_style'])}\\):\n{escape_md(review)}"
            )
            await bot.send_message(CHANNEL_ID, text=post, parse_mode=ParseMode.MARKDOWN_V2)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
            save_to_history({
                "imdb_id": movie["imdb_id"],
                "title": movie["title"],
                "year": movie["year"],
                "plot": movie.get("plot", "")
            })

            await message.answer("‚úÖ –†–µ—Ü–µ–Ω–∑–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞\!")
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\: {e}")
        finally:
            await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    else:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç —Ä–µ—Ü–µ–Ω–∑–∏–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é\.")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message(F.text == "üîô –í –∞–¥–º–∏–Ω–∫—É")
async def back_to_admin_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await admin_panel(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞
@dp.callback_query(F.data.startswith("genre_"), AdminStates.setting_genre)
async def genre_selected(callback: types.CallbackQuery, state: FSMContext):
    genre = callback.data.split("_")[1]
    DB["current_genre"] = genre
    await callback.message.edit_text(f"‚úÖ –ñ–∞–Ω—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {genre}")
    await state.clear()
    await admin_panel(callback.message)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
@dp.callback_query(F.data.startswith("style_"), AdminStates.setting_style)
async def style_selected(callback: types.CallbackQuery, state: FSMContext):
    style = callback.data.split("_")[1]
    DB["current_style"] = style
    await callback.message.edit_text(f"‚úÖ –°—Ç–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {style}")
    await state.clear()
    await admin_panel(callback.message)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –í –º–µ–Ω—é"
@dp.message(F.text == "üîô –í –º–µ–Ω—é")
async def back_to_menu_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await cmd_start(message)

@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    markup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé¨ –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

    if message.from_user.id in ADMINS:
        markup.keyboard.append([KeyboardButton(text="/admin")])

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CinemaBot\! üçø\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

@dp.message(F.text == "/admin")
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMINS:
        return

    try:
        cron_parts = DB["schedule"].split()
        current_time = f"{cron_parts[1]}:{cron_parts[0]}"
    except:
        current_time = "‚è∞ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

    status_text = (
        f"‚öôÔ∏è *–ê–¥–º–∏–Ω\-–ø–∞–Ω–µ–ª—å*\n\n"
        f"‚ñ´Ô∏è –ñ–∞–Ω—Ä: {escape_md(DB['current_genre'])}\n"
        f"‚ñ´Ô∏è –°—Ç–∏–ª—å: {escape_md(DB['current_style'])}\n"
        f"‚ñ´Ô∏è –í—Ä–µ–º—è: {escape_md(current_time)}\n\n"
        f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Ñ–∏–ª—å–º–æ–≤: {len(DB['posted_imdb_ids'])}"
    )

    builder = ReplyKeyboardBuilder()

    # –ü–µ—Ä–≤—ã–π —Ä—è–¥
    builder.row(
        KeyboardButton(text="üé≠ –°–º–µ–Ω–∏—Ç—å –∂–∞–Ω—Ä"),
        KeyboardButton(text="üñã –°–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å")
    )

    # –í—Ç–æ—Ä–æ–π —Ä—è–¥
    builder.row(
        KeyboardButton(text="‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è"),
        KeyboardButton(text="üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å")
    )

    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥
    builder.row(
        KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é"),
        KeyboardButton(text="üîô –í –º–µ–Ω—é")
    )


    await message.answer(
        status_text,
        reply_markup=builder.as_markup(
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìù –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é"
@dp.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é")
async def custom_review_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    await message.answer(
        "üé¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏\:\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "\- –ö—Ä–µ—Å—Ç–Ω—ã–π –æ—Ç–µ—Ü, –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω–∞—è —Å–∞–≥–∞ –æ –º–∞—Ñ–∏–∏\n"
        "\- –§–∏–ª—å–º –ø—Ä–æ —Ä–æ–±–æ—Ç–æ–≤\-–ø–æ–ª–∏—Ü–µ–π—Å–∫–∏—Ö –≤ –±—É–¥—É—â–µ–º –º–µ–≥–∞–ø–æ–ª–∏—Å–µ\n"
        "‚ùå –û—Ç–º–µ–Ω–∞ \- \/cancel",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(AdminStates.custom_review)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–ø—É—Å–∫
async def main():
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    history = load_history()
    DB["posted_imdb_ids"] = [m["imdb_id"] for m in history[-500:]]

    scheduler.add_job(
        publish_scheduled_post,
        trigger='cron',
        **parse_cron(DB['schedule'])
    )
    scheduler.start()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())