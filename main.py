import os
import json
import logging
from typing import Dict, Optional
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
import asyncio
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram import Router
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramAPIError
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import openai
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GOOGLE_CX_ID = os.getenv("GOOGLE_CX_ID")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# bot = Bot(token=TELEGRAM_BOT_TOKEN)
bot = Bot(
    token=os.getenv("TELEGRAM_BOT_TOKEN"),
    default=DefaultBotProperties(
        parse_mode=ParseMode.MARKDOWN_V2,
        link_preview_is_disabled=True
       # disable_web_page_preview=True
    )
)
#dp = Dispatcher(bot)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π –æ–ø–∏—Å–∞–Ω–∏–π
with open("styles.json", "r", encoding="utf-8") as f:
    STYLE_DESCRIPTIONS = json.load(f)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()
subscribers: Dict[int, bool] = {}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI
openai.api_key = OPENAI_API_KEY
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–∏–Ω–æ–∫—Ä–∏—Ç–∏–∫. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∏–ª—å–º—ã, "
    "–¥–∞–≤–∞–π –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å—é–∂–µ—Ç–∞, –∞–∫—Ç–µ—Ä—Å–∫–æ–π –∏–≥—Ä—ã –∏ —Ä–µ–∂–∏—Å—Å—É—Ä—ã."
)


class APIError(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ API"""


async def search_movie_gpt(description: str) -> Optional[str]:
    """–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Å –ø–æ–º–æ—â—å—é GPT-4"""
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": f"–û–ø—Ä–µ–¥–µ–ª–∏ —Ñ–∏–ª—å–º –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é: {description}"}
            ]
        )
        return response["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logger.error(f"OpenAI error: {str(e)}")
        raise APIError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI")


async def generate_review_gpt(movie_title: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–Ω–∑–∏–∏ —Å –ø–æ–º–æ—â—å—é GPT-4"""
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4",
            messages=[
                {"role": "system", "content": SYSTEM_PROMPT},
                {"role": "user", "content": f"–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ—Ü–µ–Ω–∑–∏—é –Ω–∞ —Ñ–∏–ª—å–º: {movie_title}"}
            ]
        )
        return response["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logger.error(f"OpenAI error: {str(e)}")
        raise APIError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏")


async def search_trailer_google(movie_title: str) -> Optional[str]:
    """–ü–æ–∏—Å–∫ —Ç—Ä–µ–π–ª–µ—Ä–∞ —á–µ—Ä–µ–∑ Google Custom Search"""
    url = "https://www.googleapis.com/customsearch/v1"
    params = {
        "key": GOOGLE_API_KEY,
        "cx": GOOGLE_CX_ID,
        "q": f"{movie_title} —Ç—Ä–µ–π–ª–µ—Ä",
        "siteSearch": "youtube.com",
        "num": 1
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                if response.status != 200:
                    return None

                data = await response.json()
                if "items" not in data or not data["items"]:
                    return None

                return data["items"][0].get("link")
    except Exception as e:
        logger.error(f"Google Search error: {str(e)}")
        return None


# @dp.message_handler()
@dp.message()
async def handle_movie_search(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤"""
    try:
        description = message.text.strip()
        if len(description) < 10:
            await message.reply("‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤).")
            return

        # –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞
        movie_title = await search_movie_gpt(description)
        if not movie_title:
            await message.reply("üîç –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∏–ª—å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–Ω–∑–∏–∏
        review = await generate_review_gpt(movie_title)

        # –ü–æ–∏—Å–∫ —Ç—Ä–µ–π–ª–µ—Ä–∞
        trailer_link = await search_trailer_google(movie_title)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = f"üé¨ *{movie_title}*\n\n{review}"
        if trailer_link:
            response += f"\n\nüé• [–°–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä]({trailer_link})"

        await message.reply(response, parse_mode=ParseMode.MARKDOWN)

    except APIError as e:
        await message.reply(f"‚ö†Ô∏è {str(e)}")
    except TelegramAPIError as e:
        logger.error(f"Telegram API error: {str(e)}")
    except Exception as e:
        logger.error(f"Unexpected error: {str(e)}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    try:
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        scheduler.start()

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await dp.start_polling(bot)

    except KeyboardInterrupt:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
        await shutdown()


async def shutdown():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    scheduler.shutdown()
    await bot.session.close()
    logger.info("Bot stopped gracefully")


if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        asyncio.run(main())

    except KeyboardInterrupt:
        # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫
        logger.info("Forced shutdown")